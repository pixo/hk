docformatrevision(18)
oid[1]=create("RenderGraphNodeScript","","TexturePack")
	oid[2]=create("RenderGraphInput","$1","Input1")
		set("$2.PlugName","Input")
	oid[3]=create("RenderGraphOutput","$1","Output1")
		set("$3.PlugName","Output")
	set("$1.NodePos",{-581,13.5})
	set("$1.Script","--texture_pack v0.1\010\010--Define attributes\010texture_attrs = {\010\009\009\009TxBump = { \"bump\", Bump },\010\009\009\009TxNormalMap = { \"norm\", Normal },\010\009\009\009TxDisplace = { \"disp\", Displace },\010\009\009\009--Diffuse\010\009\009\009TxDiffuseColor = { \"diff1col\", DiffuseColor },\010\009\009\009TxDiffuse2Color = { \"diff2col\", DiffuseColor2 },\010\009\009\009TxDiffuse2Mask = { \"diff2\", DiffuseColor2Mask },\010\009\009\009TxDiffuseTranslucenceColor = { \"transcol\", TranslucenceColor },\010\009\009\009TxDiffuseTranslucence = { \"trans\", Translucence },\010\009\009\009TxDiffuseVelvetEdgeColor = { \"veltcol\", VelvetEdgeColor },\010\009\009\009TxDiffuseVelvetEdge = { \"velt\", VelvetEdge },\010\009\009\009TxDiffuseVelvetBackColor = { \"veltbcol\", VelvetBackColor },\010\009\009\009TxDiffuseVelvetBack = { \"veltb\", VelvetBack },\010\009\009\009TxDiffuseVelvetEdginess = { \"veltedg\", VelvetEdginess },\010\009\009\009TxDiffuseVelvetBackRoughness = {\"veltbrgh\", VelvetBackRoughness} ,\010\010\009\009\009--Spec1 Spec2\010\009\009\009TxSpec1Roughness = { \"spec1rgh\", Spec1Roughness },\010\009\009\009TxSpec2Roughness = { \"spec2rgh\", Spec2Roughness },\010\009\009\009TxSpec1Color = { \"spec1\", Spec1Color },\010\009\009\009TxSpec2Color = { \"spec2\", Spec2Color },\010\009\009\009TxSpec1Iridescence = { \"spec1irid\", Spec1Iridescence },\010\009\009\009TxSpec2Iridescence = { \"spec2irid\", Spec2Iridescence },\010\009\009\009TxSpec2Thickness = { \"spec2thick\", Spec2Thickness },\010\009\009\009TxSpec2Bump = { \"spec2bmp\", Spec2Bump },\010\010\009\009\009--Metal\009\009\010\009\009\009TxMetal = { \"mtal\", Metal },\010\009\009\009TxMetalColor = { \"mtalcol\", MetalColor },\010\009\009\009TxMetalRoughness = { \"mtalrgh\", MetalRoughness },\010\009\009\009TxMetalIridescence = { \"mtalirid\", MetalIridescence },\010\010\009\009\009--Glass\010\009\009\009TxGlassRoughness = { \"glasrgh\", GlassRoughness },\010\009\009\009TxGlassColor = { \"glascol\", GlassColor },\010\009\009\009TxGlassAbsorptionColor = { \"glasabscol\", GlassAbsorptionColor } ,\010\009\009\009TxGlassAbsorptionScale = { \"glasabsscl\", GlassAbsorptionScale } ,\010\010\009\009\009--Dirt\010\009\009\009TxDirtColor = { \"dirtcol\", DirtColor },\010\009\009\009TxDirt = { \"dirt\", Dirt },\010\010\009\009\009--Emission\010\009\009\009TxEmission = { \"emis\", Emission },\010\009\009\009TxEmissionColor = { \"emiscol\", EmissionColor },\010\010\009\009\009--SSS\010\009\009\009TxSSS = { \"sss\", SSS },\010\009\009\009TxSSSWidth = { \"ssswidth\", SSSWidth },\010\009\009\009TxSSSBackScatter = { \"sssbsct\", SSSBackScatter}\010\009\009\009}\010\010if Input then\010\010\009Output = duplicate (Input)\010\010\009if asset_id ~= \"\" then\010\009\009proj = os.getenv ( \"HK_PROJECT\" )\010\009\009version = string.format ( \"%03d\", asset_version )\010\009\009\010\009\009--Split asset id\010\009\009asset = {}\009\010\009\009for token in string.gmatch ( asset_id, \"([^_]+)\" ) do\010\009\009\009table.insert( asset, token )\010\009\009end\010\010\009\009proj = asset[1]\010\009\009asset_type = asset[2]\010\009\009asset_name = asset[3]\010\009\009asset_fork = asset[5]\010\010\009\009--Get repository\010\009\009if asset_repo == \"network\" then\010\009\009\009--If in pub\010\009\009\009root = os.getenv ( \"HK_REPO\" )\010\009\009\009ext = \"tex\"\010\009\009else\010\009\009\009--If in user work\010\009\009\009root = os.getenv ( \"HK_USER_REPO\" )\010\009\009\009ext = \"tif\"\010\009\009\009version = asset_wedge\010\009\009end\010\010\009\009--variation\010\009\009Output [ \"variable.IsVariation\" ] = 1\010\010\009\009--Create asset path and base filename\010\009\009asset_path = string.format ( \"%s/%s/%s/%s/%s/%s/%s\", root, proj, asset_type, asset_name, \"tex\", asset_fork, version )\010\009\009fname = string.format ( \"%s_%s_%s_%s_%s\", proj, asset_type, asset_name, \"tex\", asset_fork )\010\010\009\009--Set path to all attributes\010\009\009for k, v in pairs ( texture_attrs ) do\010\009\009\009attr = \"variable.\".. k\010\010\009\009\009if v[2] then\010\010\009\009\009\009Output [ attr ] = string.format ( \"%s/%s_%s_%s.%s.%s\", asset_path, fname, \"%d\", v[1], \"%d\", ext )\010\010\009\009\009end\010\010\009\009end\010\009\010\009end\010\010end\010")
	set("$1.State","active")
	set("$1.UseActiveNode",false)
	set("$1._UseActiveNode",2900)
	oid[4]=create("RenderGraphNodeScriptParam","$1","asset_id",4,types.string,"")
	oid[5]=create("RenderGraphNodeScriptParam","$1","asset_repo",4,types.enum {"network","local"},"network")
	oid[6]=create("RenderGraphNodeScriptParam","$1","asset_version",4,types.int {min=1,max=1000,step=10,slidermin=1,slidermax=1000},1)
	oid[7]=create("RenderGraphNodeScriptParam","$1","asset_wedge",4,types.string,"wedge")
	oid[8]=create("RenderGraphNodeScriptParam","$1","Bump",4,types.bool,true)
	oid[9]=create("RenderGraphNodeScriptParam","$1","DiffuseColor",4,types.bool,true)
	oid[10]=create("RenderGraphNodeScriptParam","$1","DiffuseColor2",4,types.bool,false)
	oid[11]=create("RenderGraphNodeScriptParam","$1","DiffuseColor2Mask",4,types.bool,false)
	oid[12]=create("RenderGraphNodeScriptParam","$1","Dirt",4,types.bool,false)
	oid[13]=create("RenderGraphNodeScriptParam","$1","DirtColor",4,types.bool,false)
	oid[14]=create("RenderGraphNodeScriptParam","$1","Displace",4,types.bool,false)
	oid[15]=create("RenderGraphNodeScriptParam","$1","Emission",4,types.bool,false)
	oid[16]=create("RenderGraphNodeScriptParam","$1","EmissionColor",4,types.bool,false)
	oid[17]=create("RenderGraphNodeScriptParam","$1","GlassAbsorptionColor",4,types.bool,false)
	oid[18]=create("RenderGraphNodeScriptParam","$1","GlassAbsorptionScale",4,types.bool,false)
	oid[19]=create("RenderGraphNodeScriptParam","$1","GlassColor",4,types.bool,false)
	oid[20]=create("RenderGraphNodeScriptParam","$1","GlassRoughness",4,types.bool,false)
	oid[21]=create("RenderGraphNodeScriptParam","$1","Metal",4,types.bool,false)
	oid[22]=create("RenderGraphNodeScriptParam","$1","MetalColor",4,types.bool,false)
	oid[23]=create("RenderGraphNodeScriptParam","$1","MetalIridescence",4,types.bool,false)
	oid[24]=create("RenderGraphNodeScriptParam","$1","MetalRoughness",4,types.bool,false)
	oid[25]=create("RenderGraphNodeScriptParam","$1","Normal",4,types.bool,false)
	oid[26]=create("RenderGraphNodeScriptParam","$1","Spec1Color",4,types.bool,false)
	oid[27]=create("RenderGraphNodeScriptParam","$1","Spec1Iridescence",4,types.bool,false)
	oid[28]=create("RenderGraphNodeScriptParam","$1","Spec1Roughness",4,types.bool,true)
	oid[29]=create("RenderGraphNodeScriptParam","$1","Spec2Bump",4,types.bool,false)
	oid[30]=create("RenderGraphNodeScriptParam","$1","Spec2Color",4,types.bool,false)
	oid[31]=create("RenderGraphNodeScriptParam","$1","Spec2Iridescence",4,types.bool,false)
	oid[32]=create("RenderGraphNodeScriptParam","$1","Spec2Roughness",4,types.bool,false)
	oid[33]=create("RenderGraphNodeScriptParam","$1","Spec2Thickness",4,types.bool,false)
	oid[34]=create("RenderGraphNodeScriptParam","$1","SSS",4,types.bool,false)
	oid[35]=create("RenderGraphNodeScriptParam","$1","SSSBackScatter",4,types.bool,false)
	oid[36]=create("RenderGraphNodeScriptParam","$1","SSSWidth",4,types.bool,false)
	oid[37]=create("RenderGraphNodeScriptParam","$1","Translucence",4,types.bool,false)
	oid[38]=create("RenderGraphNodeScriptParam","$1","TranslucenceColor",4,types.bool,false)
	oid[39]=create("RenderGraphNodeScriptParam","$1","VelvetBack",4,types.bool,false)
	oid[40]=create("RenderGraphNodeScriptParam","$1","VelvetBackColor",4,types.bool,false)
	oid[41]=create("RenderGraphNodeScriptParam","$1","VelvetBackRoughness",4,types.bool,false)
	oid[42]=create("RenderGraphNodeScriptParam","$1","VelvetEdge",4,types.bool,false)
	oid[43]=create("RenderGraphNodeScriptParam","$1","VelvetEdgeColor",4,types.bool,false)
	oid[44]=create("RenderGraphNodeScriptParam","$1","VelvetEdginess",4,types.bool,false)
