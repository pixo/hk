<Node>
  <DefaultName>Lambertian Diffuse</DefaultName>
  <Inputs>
    <Input Name="DiffuseColor" PrettyName="Diffuse Color" PreferredInput='1'></Input>
    <Input Name="Normal"></Input>
  </Inputs>
  <Attributes>
  </Attributes>
  <Tags>
    <Tag>_notcacheable</Tag>
    <Tag>_diffuse</Tag>
  </Tags>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="DiffuseColor"><Pos>-30,-50</Pos></Input>
                <Input Name="Normal"><Pos>30,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="DiffuseColor"><Default>vec4(0,0,0,0)</Default></Input>
                    <Input Name="Normal"><Default>vec4(0,0,1,1)</Default></Input>
                </Inputs>
                <Body><![CDATA[
    vec3 N = #Normal.xyz;

    vec3 Diffuse = vec3(0.0);

    for(int i=0;i<4;i++)
    {
        //Light Direction
        vec3 L = normalize(gl_LightSource[i].position.xyz - State.fragmentPos_inEyeSpace_fromViewCamera);
        float LdotN = max(dot(L,N),0.0);

        float lightVisibility = do_lightVisibility( State, i, State.fragmentPos_inObjSpace);

        // Lambertian Diffuse
        Diffuse += LdotN * gl_LightSource[i].diffuse.rgb * lightVisibility; 
    }

    Output.rgb = Diffuse * #DiffuseColor.rgb;
    Output.a = #DiffuseColor.a;
                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

