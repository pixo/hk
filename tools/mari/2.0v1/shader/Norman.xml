<Node>
  <VersionUUID>NORMAN_STUDIOS_surface</VersionUUID>
  <DefaultName>Norman Lighting</DefaultName>
  <Inputs>
    <Input Name="diff" PrettyName="Diffuse Color" PreferredInput='1'></Input>
    <Input Name="dirtco" PrettyName="Dirt Color" PreferredInput='0.18'></Input>
    <Input Name="dirt" PrettyName="Dirt Mask" PreferredInput='0'></Input>
    <Input Name="spec" PrettyName="Specular1 Weight" PreferredInput='1'></Input>
    <Input Name="srgh" PrettyName="Specular1 Roughness" PreferredInput='1'></Input>

    <Input Name="Normal"></Input>
  </Inputs>
  <Attributes>
    <Attribute Name="Diffuse" Group="Display" Type="double" Min="0" Max="1">1</Attribute>
    <Attribute Name="Dirt" Group="Display" Type="double" Min="0" Max="1">1</Attribute>
    <Attribute Name="Specular" Group="Display" Type="double" Min="0" Max="1">1</Attribute>
    <Attribute Name="SpecularRoughness" PrettyName="Specular Roughness" Group="Display" Type="double" Min="0.000" Max="1">1</Attribute>
    <Attribute Name="IOR" Group="Advanced" Type="double" Min="1" Max="5">1.3</Attribute>
    <Attribute Name="CE" PrettyName="Conserve Energy" Group="Advanced" Type="double" Min="0" Max="1">1</Attribute>
  </Attributes>
  <Tags>
    <Tag>_notcacheable</Tag>
    <Tag>_diffuse</Tag>
  </Tags>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="diff"><Pos>0,-50</Pos></Input>
                <Input Name="dirtco"><Pos>0,-50</Pos></Input>
                <Input Name="dirt"><Pos>0,-50</Pos></Input>
                <Input Name="spec"><Pos>-60,-50</Pos></Input>
                <Input Name="srgh"><Pos>0,-50</Pos></Input>
                <Input Name="Normal"><Pos>60,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="diff"><Default>vec4(0.5,0.5,0.5,1)</Default></Input>
                    <Input Name="dirtco"><Default>vec4(0.18,0.18,0.18,1)</Default></Input>
                    <Input Name="dirt"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="spec"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="srgh"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="Normal"><Default>vec4(0,0,1,1)</Default></Input>
                </Inputs>
                <Body><![CDATA[
    vec3 i = State.viewDir_inEyeSpace_fromViewCamera;
    vec3 n = normalize(#Normal.xyz);
    vec3 wo = normalize(-State.viewDir_inEyeSpace_fromViewCamera);
    float eta = 1/$IOR;

    float spec1_r = $SpecularRoughness * #srgh.r;
    float spec1_r2 = spec1_r * spec1_r;
    float spec1_r4 = max ( 0.001, spec1_r2 * spec1_r2 );
    float oor = 1 / spec1_r4;
    

    vec3 Specular = vec3(0.0); 
    vec3 Diffuse = vec3(0.0);

    //Fresnel Reflection
    vec3 R = reflect (i, n);
    vec3 T = refract (i, n, eta);
    float cos_theta1 = dot ( n, R );
    float cos_theta2 = dot ( -n, T );
    float   ppara = (cos_theta1 - eta * cos_theta2) / (cos_theta1 + eta * cos_theta2);
    float   pperp = (eta * cos_theta1 - cos_theta2) / (eta * cos_theta1 + cos_theta2);
    float Kr = clamp (0.5*((ppara*ppara)+(pperp*pperp)), 0, 1);
    float Kt = 1 - Kr;

    for(int i=0;i<4;i++)
    {
        //Light Direction
        vec3 wi = normalize(gl_LightSource[i].position.xyz - State.fragmentPos_inEyeSpace_fromViewCamera);
        //Half Vector
        vec3 h = normalize ( wi + wo ); 

        float lightVisibility = do_lightVisibility( State, i, State.fragmentPos_inObjSpace);

        float nwi = max ( 0.0, dot ( n, wi ) );
        float nh = max ( 0.001, dot ( n, h ) );
        float nwo = max (0.001, dot ( n, wo ));
        float hwo = max (0.001, dot ( h, wo ));
        float nhohwo = nh / hwo;

        //Beckman
        float F = Kr; 
        float D = 0.5 * ( oor + 2 ) * pow ( nh, oor );
        float G = min ( 1, 2 * min ( nwo * nhohwo, nwi * nhohwo ) );
        float specbrdf = max ( 0, 0.25 * F * G * D / nwo );

        //Fresnel diffuse
        vec3 R_d = reflect ( -wi, n );
        vec3 T_d = refract ( -wi, n, eta );
        float cos_theta1_d = dot ( n, R_d );
        float cos_theta2_d = dot ( -n, T_d );
        float   ppara_d = ( cos_theta1_d - eta * cos_theta2_d ) / ( cos_theta1_d + eta * cos_theta2_d );
        float   pperp_d = ( eta * cos_theta1_d - cos_theta2_d ) / ( eta * cos_theta1_d + cos_theta2_d );
        float Krd = clamp ( 0.5 * ( ( ppara_d*ppara_d ) + ( pperp_d * pperp_d ) ), 0, 1 );
        float Ktd = 1 - Krd;

        // Beckman specular
        Specular += gl_LightSource[i].specular.rgb * specbrdf * lightVisibility;

        // Lambertian Diffuse
        Diffuse += nwi * gl_LightSource[i].diffuse.rgb * lightVisibility; 
    }

    Output.rgb = lighting_mode==0 ? #diff.rgb : Diffuse * $Diffuse * #diff.rgb * mix ( 1, Kt, $CE );
    Output.rgb += lighting_mode==2 ? vec3 ( Specular * #spec.r * $Specular ): vec3(0.0);
    Output.rgb = mix ( Output.rgb, Diffuse * #dirtco.rgb, $Dirt * #dirt.r );
    Output.a = #diff.a;
                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>