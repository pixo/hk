<Node>
  <DefaultName>Standard Lighting</DefaultName>
  <Inputs>
    <Input Name="DiffuseColor" PrettyName="Diffuse Color" PreferredInput='1'></Input>
    <Input Name="DirtColor" PrettyName="Dirt Color" PreferredInput='1'></Input>
  </Inputs>
  <Attributes>
    <Attribute Name="Diffuse" Group="" Type="double" Min="0" Max="1">0.7</Attribute>
    <Attribute Name="Dirt" Group="" Type="double" Min="0" Max="1">0.0</Attribute>
    <Attribute Name="Specular" Group="" Type="double" Min="0" Max="1">0.2</Attribute>
    <Attribute Name="SpecularRoughness" PrettyName="Specular Roughness" Group="" Type="double" Min="0.001" Max="0.999">0.5</Attribute>
  </Attributes>
  <Tags>
    <Tag>_notcacheable</Tag>
    <Tag>_specular</Tag>
  </Tags>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="DiffuseColor"><Pos>0,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="DiffuseColor"><Default>vec4(0,0,0,0)</Default></Input>
                </Inputs>
                <Body><![CDATA[
    vec3 E = normalize(-State.viewDir_inEyeSpace_fromViewCamera);
    vec3 N = State.normal_inEyeSpace_fromViewCamera; 

    float specrough2 = $SpecularRoughness*$SpecularRoughness;

    vec3 Specular = vec3(0.0); 
    vec3 Diffuse = vec3(0.0);

    for(int i=0;i<4;i++)
    {
        //Light Direction
        vec3 L = normalize(gl_LightSource[i].position.xyz - State.fragmentPos_inEyeSpace_fromViewCamera);
        //Half Vector
        vec3 H = normalize(L+E); 

        float lightVisibility = do_lightVisibility( State, i, State.fragmentPos_inObjSpace);

        float LdotN = max(dot(L,N),0.0);
        float NdotH = clamp( dot(N,H), 0.001, 0.999);
        float NdotH2 = NdotH*NdotH;

        //Beckman
        float tanbeta2 =  (1.0-NdotH2)/NdotH2; 
        float D = exp(-4.0 * tanbeta2 / specrough2) / (4.0 * specrough2*NdotH2*NdotH2);

        // Beckman specular
        Specular += gl_LightSource[i].specular.rgb * D * lightVisibility;

        // Lambertian Diffuse
        Diffuse += LdotN * gl_LightSource[i].diffuse.rgb * lightVisibility; 
    }

    vec3 cDiff = Diffuse * $Diffuse * #DiffuseColor.rgb;
    vec3 cDirt = Diffuse * #DirtColor.rgb;
    vec3 DiffDirt = mix ( vec3(1,0,0), vec3(0,0,1), $Dirt );

    Output.rgb = lighting_mode==0 ? #DiffuseColor.rgb : DiffDirt;

    Output.rgb += lighting_mode==2 ? vec3(Specular * $Specular): vec3(0.0);

    Output.a = #DiffuseColor.a;
                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

